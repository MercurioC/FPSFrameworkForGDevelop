{
  "associatedLayout": "sandbox",
  "name": "ui_manager",
  "events": [
    {
      "colorB": 228,
      "colorG": 176,
      "colorR": 74,
      "creationTime": 0,
      "name": "UI",
      "source": "",
      "type": "BuiltinCommonInstructions::Group",
      "events": [
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "KeyFromTextPressed"
              },
              "parameters": [
                "",
                "\"F3\""
              ]
            },
            {
              "type": {
                "value": "BuiltinCommonInstructions::Once"
              },
              "parameters": []
            }
          ],
          "actions": [
            {
              "type": {
                "value": "SetBooleanVariable"
              },
              "parameters": [
                "ui_isActivated",
                "Toggle",
                ""
              ]
            }
          ]
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "BooleanVariable"
              },
              "parameters": [
                "ui_isActivated",
                "True",
                ""
              ]
            },
            {
              "type": {
                "value": "BuiltinCommonInstructions::Once"
              },
              "parameters": []
            }
          ],
          "actions": [
            {
              "type": {
                "value": "ShowLayer"
              },
              "parameters": [
                "",
                "\"ui_elements\""
              ]
            },
            {
              "type": {
                "value": "ShowLayer"
              },
              "parameters": [
                "",
                "\"hud_minimap\""
              ]
            }
          ]
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "BooleanVariable"
              },
              "parameters": [
                "ui_isActivated",
                "False",
                ""
              ]
            },
            {
              "type": {
                "value": "BuiltinCommonInstructions::Once"
              },
              "parameters": []
            }
          ],
          "actions": [
            {
              "type": {
                "value": "HideLayer"
              },
              "parameters": [
                "",
                "\"ui_elements\""
              ]
            },
            {
              "type": {
                "value": "HideLayer"
              },
              "parameters": [
                "",
                "\"hud_minimap\""
              ]
            }
          ]
        },
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "folded": true,
          "name": "dev_debug",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "LayerVisible"
                  },
                  "parameters": [
                    "",
                    "\"dev_debug\""
                  ]
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Raycaster3D::RaycastFromCameraCenter"
                      },
                      "parameters": [
                        "",
                        "model_collision",
                        "Raycaster3D::Distance()",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetNumberVariable"
                      },
                      "parameters": [
                        "dev_posX",
                        "=",
                        "roundTo(Raycaster3D::IntersectionX(), 2)"
                      ]
                    },
                    {
                      "type": {
                        "value": "SetNumberVariable"
                      },
                      "parameters": [
                        "dev_posY",
                        "=",
                        "roundTo(Raycaster3D::IntersectionY(), 2)"
                      ]
                    },
                    {
                      "type": {
                        "value": "SetNumberVariable"
                      },
                      "parameters": [
                        "dev_posZ",
                        "=",
                        "roundTo(Raycaster3D::IntersectionZ(), 2)"
                      ]
                    },
                    {
                      "type": {
                        "value": "BBText::SetBBText"
                      },
                      "parameters": [
                        "dev_coordinates",
                        "=",
                        "\"X: \" + dev_posX + \" ; \" +\n\"Y: \" + dev_posY + \" ; \" +\n\"Z: \" + dev_posZ"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": []
        },
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "folded": true,
          "name": "ui_crosshair",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Spread debug"
            },
            {
              "disabled": true,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "PrimitiveDrawing::Circle"
                  },
                  "parameters": [
                    "crosshair_spreadViewer",
                    "game_widthCenter",
                    "game_heightCenter",
                    "weapon_spread"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Initial properties"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "DepartScene"
                  },
                  "parameters": [
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetBooleanVariable"
                  },
                  "parameters": [
                    "crosshair_hasPointer",
                    "True",
                    "SceneWindowWidth() / 2"
                  ]
                },
                {
                  "type": {
                    "value": "SetBooleanVariable"
                  },
                  "parameters": [
                    "crosshair_isDynamic",
                    "True",
                    "SceneWindowWidth() / 2"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetNumberVariable"
                  },
                  "parameters": [
                    "crosshair_length",
                    "=",
                    "12"
                  ]
                },
                {
                  "type": {
                    "value": "SetNumberVariable"
                  },
                  "parameters": [
                    "crosshair_thickness",
                    "=",
                    "4"
                  ]
                },
                {
                  "type": {
                    "value": "SetNumberVariable"
                  },
                  "parameters": [
                    "crosshair_gap",
                    "=",
                    "8"
                  ]
                },
                {
                  "type": {
                    "value": "SetNumberVariable"
                  },
                  "parameters": [
                    "crosshair_outline",
                    "=",
                    "1"
                  ]
                },
                {
                  "type": {
                    "value": "SetNumberVariable"
                  },
                  "parameters": [
                    "crosshair_pointerSize",
                    "=",
                    "0.5"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Draw the central Pointer if active"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BooleanVariable"
                  },
                  "parameters": [
                    "crosshair_hasPointer",
                    "True",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "PrimitiveDrawing::Circle"
                  },
                  "parameters": [
                    "crosshair_viewer",
                    "game_widthCenter",
                    "game_heightCenter",
                    "crosshair_pointerSize"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Draw the crosshair; should be fully modular and changeable from the Options"
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Draw the four main Quadrants of the Crosshair"
            },
            {
              "disabled": true,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetNumberVariable"
                  },
                  "parameters": [
                    "weapon_spread",
                    "=",
                    "(player_hitbox.PhysicsCharacter3D::CurrentForwardSpeed() + player_hitbox.PhysicsCharacter3D::CurrentSidewaysSpeed()) / 10"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "PrimitiveDrawing::LineV2"
                  },
                  "parameters": [
                    "crosshair_viewer",
                    "game_widthCenter + crosshair_gap + weapon_spread",
                    "game_heightCenter",
                    "game_widthCenter + crosshair_gap + weapon_spread + crosshair_length",
                    "game_heightCenter",
                    "crosshair_thickness"
                  ]
                },
                {
                  "type": {
                    "value": "PrimitiveDrawing::LineV2"
                  },
                  "parameters": [
                    "crosshair_viewer",
                    "game_widthCenter",
                    "game_heightCenter + crosshair_gap + weapon_spread",
                    "game_widthCenter",
                    "game_heightCenter + crosshair_gap + weapon_spread + crosshair_length",
                    "crosshair_thickness"
                  ]
                },
                {
                  "type": {
                    "value": "PrimitiveDrawing::LineV2"
                  },
                  "parameters": [
                    "crosshair_viewer",
                    "game_widthCenter - crosshair_gap - weapon_spread",
                    "game_heightCenter",
                    "game_widthCenter - crosshair_gap - weapon_spread - crosshair_length",
                    "game_heightCenter",
                    "crosshair_thickness"
                  ]
                },
                {
                  "type": {
                    "value": "PrimitiveDrawing::LineV2"
                  },
                  "parameters": [
                    "crosshair_viewer",
                    "game_widthCenter",
                    "game_heightCenter - crosshair_gap - weapon_spread",
                    "game_widthCenter",
                    "game_heightCenter - crosshair_gap - weapon_spread - crosshair_length",
                    "crosshair_thickness"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "EffectCapability::EffectBehavior::SetEffectDoubleParameter"
                  },
                  "parameters": [
                    "crosshair_viewer",
                    "Effect",
                    "\"Effect\"",
                    "\"thickness\"",
                    "crosshair_outline"
                  ]
                }
              ]
            },
            {
              "folded": true,
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Change Crosshair Color when Weapon is in range with a target"
            },
            {
              "folded": true,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "inverted": true,
                    "value": "Raycaster3D::RaycastFromCameraCenter"
                  },
                  "parameters": [
                    "",
                    "group_physicsObjects",
                    "weapon_range",
                    ""
                  ]
                },
                {
                  "type": {
                    "inverted": true,
                    "value": "Raycaster3D::RaycastFromCameraCenter"
                  },
                  "parameters": [
                    "",
                    "group_enemies",
                    "weapon_range",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "PrimitiveDrawing::OutlineColor"
                  },
                  "parameters": [
                    "crosshair_viewer",
                    "\"255;255;255\""
                  ]
                }
              ]
            },
            {
              "folded": true,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Or"
                  },
                  "parameters": [],
                  "subInstructions": [
                    {
                      "type": {
                        "value": "Raycaster3D::RaycastFromCameraCenter"
                      },
                      "parameters": [
                        "",
                        "group_physicsObjects",
                        "weapon_range",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "Raycaster3D::RaycastFromCameraCenter"
                      },
                      "parameters": [
                        "",
                        "group_enemies",
                        "weapon_range",
                        ""
                      ]
                    }
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "PrimitiveDrawing::OutlineColor"
                  },
                  "parameters": [
                    "crosshair_viewer",
                    "\"208;2;27\""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Sprint check: if Sprinting, Crosshair becomes a Pointer"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BooleanVariable"
                  },
                  "parameters": [
                    "player_isSprinting",
                    "=",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetNumberVariable"
                  },
                  "parameters": [
                    "crosshair_length",
                    "=",
                    "24"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BooleanVariable"
                  },
                  "parameters": [
                    "player_isSprinting",
                    "True",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetNumberVariable"
                  },
                  "parameters": [
                    "crosshair_length",
                    "=",
                    "0"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "ADS check: if Aiming, hide the Crosshair"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BooleanVariable"
                  },
                  "parameters": [
                    "weapon_isAiming",
                    "False",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Montre"
                  },
                  "parameters": [
                    "crosshair_viewer",
                    ""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BooleanVariable"
                  },
                  "parameters": [
                    "weapon_isAiming",
                    "True",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Cache"
                  },
                  "parameters": [
                    "crosshair_viewer"
                  ]
                }
              ]
            }
          ],
          "parameters": []
        },
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "folded": true,
          "name": "ui_hitmarker",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Set position"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "MettreXY"
                  },
                  "parameters": [
                    "ui_hitmarker",
                    "=",
                    "game_widthCenter",
                    "=",
                    "game_heightCenter"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Hide when not hitting anything"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "NumberVariable"
                  },
                  "parameters": [
                    "weapon_targetHit",
                    "=",
                    "0"
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Cache"
                  },
                  "parameters": [
                    "ui_hitmarker"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Check which Hitmarker show when hitting a Target: 1 is a standard shot, 2 is a headshot"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "NumberVariable"
                  },
                  "parameters": [
                    "weapon_targetHit",
                    "=",
                    "1"
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "AnimatableCapability::AnimatableBehavior::SetName"
                  },
                  "parameters": [
                    "ui_hitmarker",
                    "Animation",
                    "=",
                    "\"hit_standard\""
                  ]
                },
                {
                  "type": {
                    "value": "Montre"
                  },
                  "parameters": [
                    "ui_hitmarker",
                    ""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "NumberVariable"
                  },
                  "parameters": [
                    "weapon_targetHit",
                    "=",
                    "2"
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "AnimatableCapability::AnimatableBehavior::SetName"
                  },
                  "parameters": [
                    "ui_hitmarker",
                    "Animation",
                    "=",
                    "\"hit_headshot\""
                  ]
                },
                {
                  "type": {
                    "value": "Montre"
                  },
                  "parameters": [
                    "ui_hitmarker",
                    ""
                  ]
                }
              ]
            }
          ],
          "parameters": []
        },
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "folded": true,
          "name": "weapon_switching",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "DepartScene"
                  },
                  "parameters": [
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "ResetTimer"
                  },
                  "parameters": [
                    "",
                    "\"ui_weaponSelect_hide\""
                  ]
                },
                {
                  "type": {
                    "value": "AnimatableCapability::AnimatableBehavior::SetSpeedScale"
                  },
                  "parameters": [
                    "ui_weaponSelect",
                    "Animation",
                    "=",
                    "0"
                  ]
                }
              ]
            },
            {
              "folded": true,
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Show/hide weapon select UI when changing"
            },
            {
              "folded": true,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "CompareTimer"
                  },
                  "parameters": [
                    "",
                    "\"ui_weaponSelect_hide\"",
                    "<",
                    "0.5"
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Montre"
                  },
                  "parameters": [
                    "ui_weaponSelect",
                    ""
                  ]
                }
              ]
            },
            {
              "folded": true,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "CompareTimer"
                  },
                  "parameters": [
                    "",
                    "\"ui_weaponSelect_hide\"",
                    ">=",
                    "0.5"
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Cache"
                  },
                  "parameters": [
                    "ui_weaponSelect"
                  ]
                },
                {
                  "type": {
                    "value": "RemoveTimer"
                  },
                  "parameters": [
                    "",
                    "\"ui_weaponSelect_hide\""
                  ]
                }
              ]
            },
            {
              "folded": true,
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Manage UI animations"
            },
            {
              "folded": true,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "ChangeSprite"
                  },
                  "parameters": [
                    "ui_weaponSelect",
                    "=",
                    "weapon_selection"
                  ]
                }
              ]
            }
          ],
          "parameters": []
        },
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "folded": true,
          "name": "ammo_text",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "TextContainerCapability::TextContainerBehavior::SetValue"
                  },
                  "parameters": [
                    "ui_ammoText",
                    "Text",
                    "=",
                    "ammo_currentLoaded + \" | \" + ammo_currentReserve"
                  ]
                }
              ]
            }
          ],
          "parameters": []
        },
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "folded": true,
          "name": "X. Prompt Text",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Defines a small message under the crosshair, useful for discovering the interactions with all the systems in-game.\n\n* The priority of these messages is defined by the position here in the event sheet, so higher-ups are lower priority.\n\n* If the text returned is \"BLANK\", hide the Prompt."
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Set Prompt position at the center of the screen, under the crosshair"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetCenter"
                  },
                  "parameters": [
                    "ui_promptText",
                    "=",
                    "ui_promptText.CenterX()",
                    "=",
                    "ui_promptText.CenterY()"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "MettreXY"
                  },
                  "parameters": [
                    "ui_promptText",
                    "=",
                    "SceneWindowWidth() / 2 - (ui_promptText.Width() / 2)",
                    "=",
                    "SceneWindowHeight()/2 + 64"
                  ]
                },
                {
                  "type": {
                    "value": "MettreXY"
                  },
                  "parameters": [
                    "ui_promptText",
                    "=",
                    "SceneWindowWidth() / 2 - (ui_promptText.Width() / 2)",
                    "=",
                    "SceneWindowHeight()/2 + 64"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Draw a background for the Prompt Text"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "PrimitiveDrawing::RoundedRectangle"
                  },
                  "parameters": [
                    "ui_promptDrawer",
                    "ui_promptText.X() - 8",
                    "ui_promptText.Y() - 8",
                    "ui_promptText.X() + ui_promptText.Width() + 8",
                    "ui_promptText.Y() + ui_promptText.Height() + 8",
                    "16"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* No bullet weapons equipped"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Or"
                  },
                  "parameters": [],
                  "subInstructions": [
                    {
                      "type": {
                        "value": "NumberVariable"
                      },
                      "parameters": [
                        "weapon_selection",
                        "=",
                        "0"
                      ]
                    },
                    {
                      "type": {
                        "value": "NumberVariable"
                      },
                      "parameters": [
                        "weapon_selection",
                        "=",
                        "1"
                      ]
                    }
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetStringVariable"
                  },
                  "parameters": [
                    "prompt_uiText",
                    "=",
                    "\"BLANK\""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Pistol Reload"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "NumberVariable"
                  },
                  "parameters": [
                    "weapon_selection",
                    "=",
                    "2"
                  ]
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "NumberVariable"
                      },
                      "parameters": [
                        "ammo_currentLoaded",
                        ">",
                        "3"
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetStringVariable"
                      },
                      "parameters": [
                        "prompt_uiText",
                        "=",
                        "\"BLANK\""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "NumberVariable"
                      },
                      "parameters": [
                        "ammo_currentLoaded",
                        "<=",
                        "3"
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetStringVariable"
                      },
                      "parameters": [
                        "prompt_uiText",
                        "=",
                        "\"(R) Reload\""
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* AK Reload"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "NumberVariable"
                  },
                  "parameters": [
                    "weapon_selection",
                    "=",
                    "3"
                  ]
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "NumberVariable"
                      },
                      "parameters": [
                        "ammo_currentLoaded",
                        ">",
                        "9"
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetStringVariable"
                      },
                      "parameters": [
                        "prompt_uiText",
                        "=",
                        "\"BLANK\""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "NumberVariable"
                      },
                      "parameters": [
                        "ammo_currentLoaded",
                        "<=",
                        "9"
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetStringVariable"
                      },
                      "parameters": [
                        "prompt_uiText",
                        "=",
                        "\"(R) Reload\""
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "NumberVariable"
                  },
                  "parameters": [
                    "ammo_currentLoaded",
                    "=",
                    "0"
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetStringVariable"
                  },
                  "parameters": [
                    "prompt_uiText",
                    "=",
                    "\"(R) Reload\""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BooleanVariable"
                  },
                  "parameters": [
                    "weapon_isReloading",
                    "True",
                    "0"
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetStringVariable"
                  },
                  "parameters": [
                    "prompt_uiText",
                    "=",
                    "\"Reloading...\""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Pick Up Objects"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Raycaster3D::RaycastFromCameraCenter"
                  },
                  "parameters": [
                    "",
                    "group_physicsObjects",
                    "80",
                    ""
                  ]
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "BooleanObjectVariable"
                      },
                      "parameters": [
                        "player_hitbox",
                        "interact_canPick",
                        "False",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetStringVariable"
                      },
                      "parameters": [
                        "prompt_uiText",
                        "=",
                        "\"BLANK\""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "BooleanObjectVariable"
                      },
                      "parameters": [
                        "player_hitbox",
                        "interact_canPick",
                        "True",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetStringVariable"
                      },
                      "parameters": [
                        "prompt_uiText",
                        "=",
                        "\"(E) Grab\""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "BooleanObjectVariable"
                      },
                      "parameters": [
                        "group_physicsObjects",
                        "isPicked",
                        "True",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetStringVariable"
                      },
                      "parameters": [
                        "prompt_uiText",
                        "=",
                        "\"(LMB) Throw\n(E) Drop\""
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Door Interactions"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Raycaster3D::RaycastFromCameraCenter"
                  },
                  "parameters": [
                    "",
                    "obj_doorCollision",
                    "80",
                    ""
                  ]
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "BooleanObjectVariable"
                      },
                      "parameters": [
                        "obj_doorCollision",
                        "key_isLocked",
                        "False",
                        ""
                      ]
                    }
                  ],
                  "actions": [],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "StringObjectVariable"
                          },
                          "parameters": [
                            "obj_doorCollision",
                            "openingStep",
                            "=",
                            "\"step_idle\""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "SetStringVariable"
                          },
                          "parameters": [
                            "prompt_uiText",
                            "=",
                            "\"(E) Open\""
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "BuiltinCommonInstructions::Or"
                          },
                          "parameters": [],
                          "subInstructions": [
                            {
                              "type": {
                                "value": "StringObjectVariable"
                              },
                              "parameters": [
                                "obj_doorCollision",
                                "openingStep",
                                "=",
                                "\"step_A1\""
                              ]
                            },
                            {
                              "type": {
                                "value": "StringObjectVariable"
                              },
                              "parameters": [
                                "obj_doorCollision",
                                "openingStep",
                                "=",
                                "\"step_B1\""
                              ]
                            }
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "SetStringVariable"
                          },
                          "parameters": [
                            "prompt_uiText",
                            "=",
                            "\"(E) Close\""
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "* Key Messages"
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "BooleanObjectVariable"
                      },
                      "parameters": [
                        "obj_doorCollision",
                        "key_needsRedKey",
                        "True",
                        ""
                      ]
                    }
                  ],
                  "actions": [],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "BooleanObjectVariable"
                          },
                          "parameters": [
                            "player_hitbox",
                            "key_hasRedKey",
                            "=",
                            ""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "SetStringVariable"
                          },
                          "parameters": [
                            "prompt_uiText",
                            "=",
                            "\"Locked! Needs a [color=red]RED Key[/color] to open.\""
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "BooleanObjectVariable"
                      },
                      "parameters": [
                        "obj_doorCollision",
                        "key_needsBlueKey",
                        "True",
                        ""
                      ]
                    }
                  ],
                  "actions": [],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "BooleanObjectVariable"
                          },
                          "parameters": [
                            "player_hitbox",
                            "key_hasBlueKey",
                            "=",
                            ""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "SetStringVariable"
                          },
                          "parameters": [
                            "prompt_uiText",
                            "=",
                            "\"Locked! Needs a [color=blue]BLUE Key[/color] to open.\""
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "BooleanObjectVariable"
                      },
                      "parameters": [
                        "obj_doorCollision",
                        "key_needGreenKey",
                        "True",
                        ""
                      ]
                    }
                  ],
                  "actions": [],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "BooleanObjectVariable"
                          },
                          "parameters": [
                            "player_hitbox",
                            "key_hasGreenKey",
                            "=",
                            ""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "SetStringVariable"
                          },
                          "parameters": [
                            "prompt_uiText",
                            "=",
                            "\"Locked! Needs a [color=green]GREEN Key[/color] to open.\""
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Triggers"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "CollisionPoint"
                  },
                  "parameters": [
                    "zone_trigger",
                    "player_hitbox.CenterX()",
                    "player_hitbox.CenterY()"
                  ]
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "StringObjectVariable"
                      },
                      "parameters": [
                        "zone_trigger",
                        "type",
                        "=",
                        "\"spawner\""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetStringVariable"
                      },
                      "parameters": [
                        "prompt_uiText",
                        "=",
                        "\"BLANK\""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "StringObjectVariable"
                      },
                      "parameters": [
                        "zone_trigger",
                        "type",
                        "=",
                        "\"button\""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetStringVariable"
                      },
                      "parameters": [
                        "prompt_uiText",
                        "=",
                        "\"(E) Press\""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "StringObjectVariable"
                      },
                      "parameters": [
                        "zone_trigger",
                        "type",
                        "=",
                        "\"elevator\""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetStringVariable"
                      },
                      "parameters": [
                        "prompt_uiText",
                        "=",
                        "\"(E) Activate\""
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Out Of Bounds prompt"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BooleanVariable"
                  },
                  "parameters": [
                    "game_outOfBounds",
                    "True",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetNumberVariable"
                  },
                  "parameters": [
                    "oob_pickPrompt",
                    "=",
                    "RandomInRange(1,6)"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BooleanVariable"
                  },
                  "parameters": [
                    "game_outOfBounds",
                    "True",
                    ""
                  ]
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "NumberVariable"
                      },
                      "parameters": [
                        "oob_pickPrompt",
                        "=",
                        "1"
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetStringVariable"
                      },
                      "parameters": [
                        "prompt_uiText",
                        "=",
                        "\"[spacing=3][color=red]OUT OF BOUNDS![/red][/spacing]\""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "NumberVariable"
                      },
                      "parameters": [
                        "oob_pickPrompt",
                        "=",
                        "2"
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetStringVariable"
                      },
                      "parameters": [
                        "prompt_uiText",
                        "=",
                        "\"[spacing=3][color=red]OUT OF MAP![/red][/spacing]\""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "NumberVariable"
                      },
                      "parameters": [
                        "oob_pickPrompt",
                        "=",
                        "3"
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetStringVariable"
                      },
                      "parameters": [
                        "prompt_uiText",
                        "=",
                        "\"[spacing=3][color=red]GET BACK IN HERE![/red][/spacing]\""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "NumberVariable"
                      },
                      "parameters": [
                        "oob_pickPrompt",
                        "=",
                        "4"
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetStringVariable"
                      },
                      "parameters": [
                        "prompt_uiText",
                        "=",
                        "\"[spacing=3][color=red]WHOOOPS![/red][/spacing]\""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "NumberVariable"
                      },
                      "parameters": [
                        "oob_pickPrompt",
                        "=",
                        "5"
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetStringVariable"
                      },
                      "parameters": [
                        "prompt_uiText",
                        "=",
                        "\"[spacing=3][color=red]Try to stay in the level, eh?[/red][/spacing]\""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "NumberVariable"
                      },
                      "parameters": [
                        "oob_pickPrompt",
                        "=",
                        "6"
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetStringVariable"
                      },
                      "parameters": [
                        "prompt_uiText",
                        "=",
                        "\"[spacing=3][color=red]Water....BAAAD!!![/red][/spacing]\""
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Health Warning"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Health::Health::Health"
                  },
                  "parameters": [
                    "player_hitbox",
                    "Health",
                    "<",
                    "30",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetStringVariable"
                  },
                  "parameters": [
                    "prompt_uiText",
                    "=",
                    "\"[spacing=5][color=red]WARNING! Low Health[/red][/spacing]\""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BooleanVariable"
                  },
                  "parameters": [
                    "gameOver",
                    "True",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetStringVariable"
                  },
                  "parameters": [
                    "prompt_uiText",
                    "=",
                    "\"[spacing=7][color=red]GAME OVER![/red][/spacing]\""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Write the Prompt Text message here"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "StringVariable"
                  },
                  "parameters": [
                    "prompt_uiText",
                    "=",
                    "\"BLANK\""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Cache"
                  },
                  "parameters": [
                    "ui_promptText"
                  ]
                },
                {
                  "type": {
                    "value": "Cache"
                  },
                  "parameters": [
                    "ui_promptDrawer"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "StringVariable"
                  },
                  "parameters": [
                    "prompt_uiText",
                    "!=",
                    "\"BLANK\""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Montre"
                  },
                  "parameters": [
                    "ui_promptText",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "Montre"
                  },
                  "parameters": [
                    "ui_promptDrawer",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "BBText::SetBBText"
                  },
                  "parameters": [
                    "ui_promptText",
                    "=",
                    "prompt_uiText"
                  ]
                }
              ]
            }
          ],
          "parameters": []
        },
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "folded": true,
          "name": "ui_playerCondition",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Updates the text of Health, Armor and Stamina"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "TextContainerCapability::TextContainerBehavior::SetValue"
                  },
                  "parameters": [
                    "ui_healthText",
                    "Text",
                    "=",
                    "ToString(round(player_hitbox.Health::Health()))"
                  ]
                },
                {
                  "type": {
                    "value": "TextContainerCapability::TextContainerBehavior::SetValue"
                  },
                  "parameters": [
                    "ui_armorText",
                    "Text",
                    "=",
                    "ToString(round(player_hitbox.Health::ShieldPoints()))"
                  ]
                },
                {
                  "type": {
                    "value": "TextContainerCapability::TextContainerBehavior::SetValue"
                  },
                  "parameters": [
                    "ui_staminaText",
                    "Text",
                    "=",
                    "ToString(round(player_staminaCurrent))"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Change Healthtext color when severely damaged"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Health::Health::Health"
                  },
                  "parameters": [
                    "player_hitbox",
                    "Health",
                    ">",
                    "30",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "TextObject::ChangeColor"
                  },
                  "parameters": [
                    "ui_healthText",
                    "\"255;255;255\""
                  ]
                },
                {
                  "type": {
                    "value": "Flash::FlashOpacity::Stop"
                  },
                  "parameters": [
                    "ui_healthText",
                    "FlashOpacity",
                    "Tween"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Health::Health::Health"
                  },
                  "parameters": [
                    "player_hitbox",
                    "Health",
                    "<=",
                    "30",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "TextObject::ChangeColor"
                  },
                  "parameters": [
                    "ui_healthText",
                    "\"208;2;27\""
                  ]
                },
                {
                  "type": {
                    "value": "Flash::FlashOpacity::Flash"
                  },
                  "parameters": [
                    "ui_healthText",
                    "FlashOpacity",
                    "Tween",
                    "0",
                    "40",
                    ""
                  ]
                }
              ]
            }
          ],
          "parameters": []
        },
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "folded": true,
          "name": "ui_keyInventory",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Set the Animation Speed to 0"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "AnimatableCapability::AnimatableBehavior::SetSpeedScale"
                  },
                  "parameters": [
                    "ui_keyInventory_red",
                    "Animation",
                    "=",
                    "0"
                  ]
                },
                {
                  "type": {
                    "value": "AnimatableCapability::AnimatableBehavior::SetSpeedScale"
                  },
                  "parameters": [
                    "ui_keyInventory_blue",
                    "Animation",
                    "=",
                    "0"
                  ]
                },
                {
                  "type": {
                    "value": "AnimatableCapability::AnimatableBehavior::SetSpeedScale"
                  },
                  "parameters": [
                    "ui_keyInventory_green",
                    "Animation",
                    "=",
                    "0"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Check if Player has Keys, update the relative frame"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BooleanObjectVariable"
                  },
                  "parameters": [
                    "player_hitbox",
                    "key_hasRedKey",
                    "True",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "ChangeSprite"
                  },
                  "parameters": [
                    "ui_keyInventory_red",
                    "=",
                    "1"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BooleanObjectVariable"
                  },
                  "parameters": [
                    "player_hitbox",
                    "key_hasBlueKey",
                    "True",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "ChangeSprite"
                  },
                  "parameters": [
                    "ui_keyInventory_blue",
                    "=",
                    "1"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BooleanObjectVariable"
                  },
                  "parameters": [
                    "player_hitbox",
                    "key_hasGreenKey",
                    "True",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "ChangeSprite"
                  },
                  "parameters": [
                    "ui_keyInventory_green",
                    "=",
                    "1"
                  ]
                }
              ]
            }
          ],
          "parameters": []
        },
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "folded": true,
          "name": "hud_radar",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "* Debug"
                },
                {
                  "disabled": true,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "TextContainerCapability::TextContainerBehavior::SetValue"
                      },
                      "parameters": [
                        "dev_text3",
                        "Text",
                        "=",
                        "ToString(player_hitbox.Angle()) + NewLine() +\ncompassAngle"
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "* Define initial variables here"
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "SetNumberVariable"
                      },
                      "parameters": [
                        "radarX",
                        "=",
                        "game_widthCenter - (game_widthCenter / 2)"
                      ]
                    },
                    {
                      "type": {
                        "value": "SetNumberVariable"
                      },
                      "parameters": [
                        "radarY",
                        "=",
                        "game_heightCenter + (game_heightCenter / 2)"
                      ]
                    },
                    {
                      "type": {
                        "value": "SetNumberVariable"
                      },
                      "parameters": [
                        "radarRange",
                        "=",
                        "800"
                      ]
                    },
                    {
                      "type": {
                        "value": "SetNumberVariable"
                      },
                      "parameters": [
                        "radarRadius",
                        "=",
                        "100"
                      ]
                    },
                    {
                      "type": {
                        "value": "SetNumberVariable"
                      },
                      "parameters": [
                        "iconRadius_player",
                        "=",
                        "8"
                      ]
                    },
                    {
                      "type": {
                        "value": "SetNumberVariable"
                      },
                      "parameters": [
                        "iconRadius_target",
                        "=",
                        "6"
                      ]
                    },
                    {
                      "type": {
                        "value": "SetNumberVariable"
                      },
                      "parameters": [
                        "scaleFactor",
                        "=",
                        "0.12"
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Formula to convert Angles in Radians; adds 90° to fix the World orientation"
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "SetNumberVariable"
                      },
                      "parameters": [
                        "player_angle_radians",
                        "=",
                        "(player_hitbox.Angle() + 90) * (Pi() / 180)"
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "* Draw the Player circle at the center of the compass"
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "PrimitiveDrawing::Circle"
                      },
                      "parameters": [
                        "radar_background",
                        "radarX",
                        "radarY",
                        "radarRadius"
                      ]
                    },
                    {
                      "type": {
                        "value": "PrimitiveDrawing::Circle"
                      },
                      "parameters": [
                        "radar_player",
                        "radarX",
                        "radarY",
                        "iconRadius_player"
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Draw the Compass indicator on North/angle 0°"
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "SetNumberVariable"
                      },
                      "parameters": [
                        "compassX",
                        "=",
                        "radarX + radarRadius * cos(player_angle_radians)"
                      ]
                    },
                    {
                      "type": {
                        "value": "SetNumberVariable"
                      },
                      "parameters": [
                        "compassY",
                        "=",
                        "radarY - radarRadius * sin(player_angle_radians)"
                      ]
                    },
                    {
                      "type": {
                        "value": "SetNumberVariable"
                      },
                      "parameters": [
                        "compassAngle",
                        "=",
                        "- player_hitbox.Angle()"
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "PrimitiveDrawing::RegularPolygon"
                      },
                      "parameters": [
                        "radar_player",
                        "compassX",
                        "compassY",
                        "3",
                        "iconRadius_player",
                        "compassAngle"
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "* Enemy Icons"
                },
                {
                  "type": "BuiltinCommonInstructions::ForEach",
                  "object": "group_enemies",
                  "conditions": [],
                  "actions": [],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Check the distance between Player and Enemy"
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "SetNumberVariable"
                          },
                          "parameters": [
                            "distance",
                            "=",
                            "DistanceBetweenPositions(player_hitbox.X(), player_hitbox.Y(), group_enemies.X(), group_enemies.Y())"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Check if Enemy is within the Radar range, with the Distance var"
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "BuiltinCommonInstructions::CompareNumbers"
                          },
                          "parameters": [
                            "distance",
                            "<=",
                            "radarRange"
                          ]
                        }
                      ],
                      "actions": [],
                      "events": [
                        {
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Convert to relative positions"
                        },
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "value": "SetNumberVariable"
                              },
                              "parameters": [
                                "relativeX",
                                "=",
                                "group_enemies.X() - player_hitbox.X()"
                              ]
                            },
                            {
                              "type": {
                                "value": "SetNumberVariable"
                              },
                              "parameters": [
                                "relativeY",
                                "=",
                                "group_enemies.Y() - player_hitbox.Y()"
                              ]
                            }
                          ]
                        },
                        {
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Rotate those positions with radians"
                        },
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "value": "SetNumberVariable"
                              },
                              "parameters": [
                                "rotatedX",
                                "=",
                                "relativeX * cos(player_angle_radians) + relativeY * sin(player_angle_radians)"
                              ]
                            },
                            {
                              "type": {
                                "value": "SetNumberVariable"
                              },
                              "parameters": [
                                "rotatedY",
                                "=",
                                "-relativeX * sin(player_angle_radians) + relativeY * cos(player_angle_radians)"
                              ]
                            }
                          ]
                        },
                        {
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Convert the coordinates and apply the scale factor"
                        },
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "value": "SetNumberVariable"
                              },
                              "parameters": [
                                "radarTargetX",
                                "=",
                                "radarX + rotatedX * scaleFactor"
                              ]
                            },
                            {
                              "type": {
                                "value": "SetNumberVariable"
                              },
                              "parameters": [
                                "radarTargetY",
                                "=",
                                "radarY + rotatedY * scaleFactor"
                              ]
                            },
                            {
                              "type": {
                                "value": "PrimitiveDrawing::Circle"
                              },
                              "parameters": [
                                "radar_enemy",
                                "radarTargetX",
                                "radarTargetY",
                                "iconRadius_target"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "* NavMarker Icons"
                },
                {
                  "type": "BuiltinCommonInstructions::ForEach",
                  "object": "entity_navMarker",
                  "conditions": [
                    {
                      "type": {
                        "value": "BooleanObjectVariable"
                      },
                      "parameters": [
                        "entity_navMarker",
                        "isActive",
                        "True",
                        ""
                      ]
                    }
                  ],
                  "actions": [],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Check the distance between Player and NavMarkers"
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "SetNumberVariable"
                          },
                          "parameters": [
                            "distance",
                            "=",
                            "DistanceBetweenPositions(player_hitbox.X(), player_hitbox.Y(), entity_navMarker.X(), entity_navMarker.Y())"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Convert to relative positions"
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "SetNumberVariable"
                          },
                          "parameters": [
                            "relativeX",
                            "=",
                            "entity_navMarker.X() - player_hitbox.X()"
                          ]
                        },
                        {
                          "type": {
                            "value": "SetNumberVariable"
                          },
                          "parameters": [
                            "relativeY",
                            "=",
                            "entity_navMarker.Y() - player_hitbox.Y()"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Rotate those positions with radians"
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "SetNumberVariable"
                          },
                          "parameters": [
                            "rotatedX",
                            "=",
                            "relativeX * cos(player_angle_radians) + relativeY * sin(player_angle_radians)"
                          ]
                        },
                        {
                          "type": {
                            "value": "SetNumberVariable"
                          },
                          "parameters": [
                            "rotatedY",
                            "=",
                            "-relativeX * sin(player_angle_radians) + relativeY * cos(player_angle_radians)"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "* Calculate the vector's magnitude to check when Nav is outside the Radar's range"
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "SetNumberVariable"
                          },
                          "parameters": [
                            "dx",
                            "=",
                            "rotatedX * scaleFactor"
                          ]
                        },
                        {
                          "type": {
                            "value": "SetNumberVariable"
                          },
                          "parameters": [
                            "dy",
                            "=",
                            "rotatedY * scaleFactor"
                          ]
                        },
                        {
                          "type": {
                            "value": "SetNumberVariable"
                          },
                          "parameters": [
                            "distanceSquare",
                            "=",
                            "sqrt\n(\n(dx * dx)\n+\n(dy * dy)\n)"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Check if NavMarkers are within the Radar range, with the Distance var"
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "BuiltinCommonInstructions::CompareNumbers"
                          },
                          "parameters": [
                            "distance",
                            "<=",
                            "radarRange"
                          ]
                        }
                      ],
                      "actions": [],
                      "events": [
                        {
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Convert the coordinates and apply the scale factor"
                        },
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "value": "SetNumberVariable"
                              },
                              "parameters": [
                                "radarTargetX",
                                "=",
                                "radarX + rotatedX * scaleFactor"
                              ]
                            },
                            {
                              "type": {
                                "value": "SetNumberVariable"
                              },
                              "parameters": [
                                "radarTargetY",
                                "=",
                                "radarY + rotatedY * scaleFactor"
                              ]
                            },
                            {
                              "type": {
                                "value": "PrimitiveDrawing::Circle"
                              },
                              "parameters": [
                                "radar_navmarker",
                                "radarTargetX",
                                "radarTargetY",
                                "iconRadius_target + 2"
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "* If Distance is bigger than the Radar range, put the icon on the edge"
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "BuiltinCommonInstructions::CompareNumbers"
                          },
                          "parameters": [
                            "distance",
                            ">",
                            "radarRange"
                          ]
                        }
                      ],
                      "actions": [],
                      "events": [
                        {
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "* Re-calculate using magnitude"
                        },
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "value": "SetNumberVariable"
                              },
                              "parameters": [
                                "ratio",
                                "=",
                                "radarRadius / distanceSquare"
                              ]
                            },
                            {
                              "type": {
                                "value": "SetNumberVariable"
                              },
                              "parameters": [
                                "dx",
                                "=",
                                "dx * ratio"
                              ]
                            },
                            {
                              "type": {
                                "value": "SetNumberVariable"
                              },
                              "parameters": [
                                "dy",
                                "=",
                                "dy * ratio"
                              ]
                            }
                          ]
                        },
                        {
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "* Apply the values and draw the Icon"
                        },
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "value": "SetNumberVariable"
                              },
                              "parameters": [
                                "radarTargetX",
                                "=",
                                "radarX + dx"
                              ]
                            },
                            {
                              "type": {
                                "value": "SetNumberVariable"
                              },
                              "parameters": [
                                "radarTargetY",
                                "=",
                                "radarY+ dy"
                              ]
                            },
                            {
                              "type": {
                                "value": "PrimitiveDrawing::Circle"
                              },
                              "parameters": [
                                "radar_navmarker",
                                "radarTargetX",
                                "radarTargetY",
                                "iconRadius_target + 2"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "variables": [
                {
                  "name": "radarX",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "radarY",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "radarTargetX",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "radarTargetY",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "distance",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "distanceSquare",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "radarRange",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "scaleFactor",
                  "type": "number",
                  "value": 1
                },
                {
                  "name": "player_angle_radians",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "relativeX",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "relativeY",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "rotatedX",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "rotatedY",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "compassX",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "compassY",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "compassOffset",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "compassAngle",
                  "type": "number",
                  "value": 90
                },
                {
                  "name": "radarRadius",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "iconRadius_player",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "iconRadius_target",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "ratio",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "dx",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "dy",
                  "type": "number",
                  "value": 0
                }
              ]
            }
          ],
          "parameters": []
        },
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "disabled": true,
          "folded": true,
          "name": "hud_damageIndicators",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Bugged as fuck"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::ForEach",
                  "object": "enemy_shooter",
                  "conditions": [],
                  "actions": [],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "SetNumberVariable"
                          },
                          "parameters": [
                            "damageSourceX",
                            "=",
                            "enemy_shooter.X()"
                          ]
                        },
                        {
                          "type": {
                            "value": "SetNumberVariable"
                          },
                          "parameters": [
                            "damageSourceY",
                            "=",
                            "enemy_shooter.Y()"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "SetNumberVariable"
                          },
                          "parameters": [
                            "dirX",
                            "=",
                            "damageSourceX - player_hitbox.X()"
                          ]
                        },
                        {
                          "type": {
                            "value": "SetNumberVariable"
                          },
                          "parameters": [
                            "dirY",
                            "=",
                            "damageSourceY - player_hitbox.Y()"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "SetNumberVariable"
                          },
                          "parameters": [
                            "length",
                            "=",
                            "sqrt(dirX * dirX + dirY * dirY)"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "BuiltinCommonInstructions::CompareNumbers"
                          },
                          "parameters": [
                            "length",
                            ">",
                            "0"
                          ]
                        }
                      ],
                      "actions": [],
                      "events": [
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "value": "SetNumberVariable"
                              },
                              "parameters": [
                                "dirX",
                                "=",
                                "dirX / length"
                              ]
                            }
                          ]
                        },
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "value": "SetNumberVariable"
                              },
                              "parameters": [
                                "dirY",
                                "=",
                                "dirY / length"
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "SetNumberVariable"
                          },
                          "parameters": [
                            "angle",
                            "=",
                            "atan2(dirY, dirX) * (180 / ExtendedMath::Pi()) - player_camera.Angle()"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "SetNumberVariable"
                          },
                          "parameters": [
                            "arrowX",
                            "=",
                            "game_widthCenter +  arrowDistanceFromCenter * cos(angle)"
                          ]
                        },
                        {
                          "type": {
                            "value": "SetNumberVariable"
                          },
                          "parameters": [
                            "arrowY",
                            "=",
                            "game_heightCenter +  arrowDistanceFromCenter * sin(angle)"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "PrimitiveDrawing::RegularPolygon"
                          },
                          "parameters": [
                            "arrow_shape",
                            "arrowX",
                            "arrowY",
                            "3",
                            "16",
                            "angle"
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "variables": [
                {
                  "name": "damageSourceX",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "damageSourceY",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "dirX",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "dirY",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "length",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "angle",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "arrowDistanceFromCenter",
                  "type": "number",
                  "value": 200
                },
                {
                  "name": "arrowX",
                  "type": "number",
                  "value": 0
                },
                {
                  "name": "arrowY",
                  "type": "number",
                  "value": 0
                }
              ]
            }
          ],
          "parameters": []
        },
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "folded": true,
          "name": "screenFX_hurt",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Set an overlay of the same size of the screen"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "DepartScene"
                  },
                  "parameters": [
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "MettreXY"
                  },
                  "parameters": [
                    "fx_hurtOverlay",
                    "=",
                    "0",
                    "=",
                    "0"
                  ]
                },
                {
                  "type": {
                    "value": "ResizableCapability::ResizableBehavior::SetWidth"
                  },
                  "parameters": [
                    "fx_hurtOverlay",
                    "Resizable",
                    "=",
                    "SceneWindowWidth()"
                  ]
                },
                {
                  "type": {
                    "value": "ResizableCapability::ResizableBehavior::SetHeight"
                  },
                  "parameters": [
                    "fx_hurtOverlay",
                    "Resizable",
                    "=",
                    "SceneWindowHeight()"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Hide at the start and when Health > 50%"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Health::Health::Health"
                  },
                  "parameters": [
                    "player_hitbox",
                    "Health",
                    ">",
                    "player_hitbox.Health::MaxHealth() / 2",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Cache"
                  },
                  "parameters": [
                    "fx_hurtOverlay"
                  ]
                },
                {
                  "type": {
                    "value": "Tween::RemoveTween"
                  },
                  "parameters": [
                    "fx_hurtOverlay",
                    "Tween",
                    "\"tween_opacity1\""
                  ]
                },
                {
                  "type": {
                    "value": "Tween::RemoveTween"
                  },
                  "parameters": [
                    "fx_hurtOverlay",
                    "Tween",
                    "\"tween_opacity2\""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Health is < 50%, flashes constantly"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Health::Health::Health"
                  },
                  "parameters": [
                    "player_hitbox",
                    "Health",
                    "<",
                    "player_hitbox.Health::MaxHealth() / 2",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Montre"
                  },
                  "parameters": [
                    "fx_hurtOverlay",
                    ""
                  ]
                }
              ],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Calculate the scale of the opacity with the slope intercept form y=mx+b"
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "SetNumberObjectVariable"
                      },
                      "parameters": [
                        "fx_hurtOverlay",
                        "opacityScale",
                        "=",
                        "- 5.1 * player_hitbox.Health::Health() + 255"
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Start an opacity tween"
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "BuiltinCommonInstructions::Once"
                      },
                      "parameters": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "Tween::TweenBehavior::AddObjectOpacityTween2"
                      },
                      "parameters": [
                        "fx_hurtOverlay",
                        "Tween",
                        "\"tween_opacity1\"",
                        "0",
                        "\"easeInQuad\"",
                        "0",
                        ""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Tween::HasFinished"
                      },
                      "parameters": [
                        "fx_hurtOverlay",
                        "Tween",
                        "\"tween_opacity1\""
                      ]
                    },
                    {
                      "type": {
                        "value": "BuiltinCommonInstructions::Once"
                      },
                      "parameters": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "Tween::TweenBehavior::AddObjectOpacityTween2"
                      },
                      "parameters": [
                        "fx_hurtOverlay",
                        "Tween",
                        "\"tween_opacity2\"",
                        "fx_hurtOverlay.opacityScale",
                        "\"easeOutQuad\"",
                        "0.2",
                        ""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Tween::HasFinished"
                      },
                      "parameters": [
                        "fx_hurtOverlay",
                        "Tween",
                        "\"tween_opacity2\""
                      ]
                    },
                    {
                      "type": {
                        "value": "BuiltinCommonInstructions::Once"
                      },
                      "parameters": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "Tween::TweenBehavior::AddObjectOpacityTween2"
                      },
                      "parameters": [
                        "fx_hurtOverlay",
                        "Tween",
                        "\"tween_opacity1\"",
                        "0",
                        "\"easeInQuad\"",
                        "0.2",
                        ""
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "When hit, flash for a moment"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Health::Health::IsJustDamaged"
                  },
                  "parameters": [
                    "player_hitbox",
                    "Health",
                    ">"
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Montre"
                  },
                  "parameters": [
                    "fx_hurtOverlay",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "OpacityCapability::OpacityBehavior::SetValue"
                  },
                  "parameters": [
                    "fx_hurtOverlay",
                    "Opacity",
                    "=",
                    "200"
                  ]
                },
                {
                  "type": {
                    "value": "Wait"
                  },
                  "parameters": [
                    "0.2"
                  ]
                },
                {
                  "type": {
                    "value": "Cache"
                  },
                  "parameters": [
                    "fx_hurtOverlay"
                  ]
                }
              ]
            }
          ],
          "parameters": []
        },
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "folded": true,
          "name": "ui_quest",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Show the Objectives when pressing the Objective button (TAB)"
            },
            {
              "disabled": true,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "DepartScene"
                  },
                  "parameters": [
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "HideLayer"
                  },
                  "parameters": [
                    "quest_text",
                    "\"quest_tabMenu\""
                  ]
                },
                {
                  "type": {
                    "value": "HideLayer"
                  },
                  "parameters": [
                    "quest_text",
                    "\"ui_elements\""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "KeyFromTextPressed"
                  },
                  "parameters": [
                    "",
                    "\"Tab\""
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "ShowLayer"
                  },
                  "parameters": [
                    "quest_text",
                    "\"quest_tabMenu\""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "KeyFromTextReleased"
                  },
                  "parameters": [
                    "",
                    "\"Tab\""
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "HideLayer"
                  },
                  "parameters": [
                    "quest_text",
                    "\"quest_tabMenu\""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Always update the Text object for Quests status"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "BBText::SetBBText"
                  },
                  "parameters": [
                    "ui_questText",
                    "=",
                    "\"Objectives:\n\n* Complete the Hazard Course: \"  + quest1_uiText + NewLine() +\n\"* Score 1500 at the Shooting Range: \" + game_quest2 + NewLine() +\n\"* Eliminate the Target: \" + game_quest3"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetCenterX"
                  },
                  "parameters": [
                    "ui_quest2_timer",
                    "=",
                    "SceneWindowWidth() / 2"
                  ]
                },
                {
                  "type": {
                    "value": "SetCenterX"
                  },
                  "parameters": [
                    "ui_quest2_score",
                    "=",
                    "SceneWindowWidth() / 2"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BBText::IsBBText"
                  },
                  "parameters": [
                    "ui_quest2_timer",
                    "=",
                    "ToString(max(0, 5))"
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "BBText::SetColor"
                  },
                  "parameters": [
                    "ui_quest2_timer",
                    "\"208;2;27\""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BBText::IsBBText"
                  },
                  "parameters": [
                    "ui_quest2_timer",
                    "=",
                    "\"TIME!\""
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "BBText::SetColor"
                  },
                  "parameters": [
                    "ui_quest2_timer",
                    "\"255;255;255\""
                  ]
                }
              ]
            }
          ],
          "parameters": []
        },
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "folded": true,
          "name": "ui_stamina",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Starting position of Frame and Bar"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "MettreXY"
                  },
                  "parameters": [
                    "ui_playerStamina_frame",
                    "=",
                    "ui_healthBar_frame.PointX(\"anchor_stamina\")",
                    "=",
                    "ui_healthBar_frame.PointY(\"anchor_stamina\")"
                  ]
                },
                {
                  "type": {
                    "value": "MettreXY"
                  },
                  "parameters": [
                    "ui_playerStamina_bar",
                    "=",
                    "ui_playerStamina_frame.PointX(\"bar_startPoint\")",
                    "=",
                    "ui_playerStamina_frame.PointY(\"bar_startPoint\")"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetNumberObjectVariable"
                  },
                  "parameters": [
                    "ui_playerStamina_bar",
                    "originalWidth",
                    "=",
                    "ui_playerStamina_bar.Width()"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Update the Width of the Bar in relation to the Player Stamina"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "ResizableCapability::ResizableBehavior::SetWidth"
                  },
                  "parameters": [
                    "ui_playerStamina_bar",
                    "Resizable",
                    "=",
                    "(player_staminaCurrent / player_staminaMax) * ui_playerStamina_bar.originalWidth"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "* Change the color of the Bar when exausted"
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "NumberVariable"
                  },
                  "parameters": [
                    "player_staminaCurrent",
                    ">",
                    "40"
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "ChangeColor"
                  },
                  "parameters": [
                    "ui_playerStamina_bar",
                    "\"126;211;33\""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "NumberVariable"
                  },
                  "parameters": [
                    "player_staminaCurrent",
                    "<=",
                    "40"
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "ChangeColor"
                  },
                  "parameters": [
                    "ui_playerStamina_bar",
                    "\"208;2;27\""
                  ]
                }
              ]
            }
          ],
          "parameters": []
        }
      ],
      "parameters": []
    }
  ]
}